@page "/"
@inject NavigationManager Nav
@inject Date Date
@inject Skills Skills
@inject Data Data 
@inject Settings Settings

<div class="input-grid">
	<div class="editor">
		<TabGroup Class="tabgroup" ActiveTab="editor-tab-active" InactiveTab="editor-tab">
			<Tab Name="Crop">
				<table class="data-table">
					<tr>
						<th></th>
						<th>Image</th>
						<th>Name</th>
						<th>Growth Time</th>
						<th>Regrow Time</th>
						<th>Seed</th>
						<th>Crop Amounts</th>
						<th>Processes</th>
						<th>Replants</th>
						<th>Seed Price and Source</th>
						<th>Warnings</th>
					</tr>
					@foreach (CropDIO crop in Data.Crops)
					{
				<tr>
					<td>
						<label class="entry-checkbox-label">
							<input type="checkbox" class="entry-checkbox" checked>
							<span class="entry-checkbox-background"></span>
						</label>
					</td>
					<td>Image</td>
					<td>@crop.Name</td>
					<td>@crop.GrowthTime</td>
					<td>
						@if (crop.Regrows)
						{
							<span>@crop.RegrowTime</span>
						}
						else
						{
							<span></span>
						}
					</td>
					<td>
						@crop.Seed.Name
						@crop.Seed.Price
					</td>
					<td>
						@crop.QualityCrops
						@crop.NormalCrops
					</td>
					<td>
						<Expander Text="Show">
							<ul>
								@foreach (Process process in crop._Processes)
								{
									<li>
										@process.Input.Name
										=>
										@process.Source.Name
										=>
										@process.OutputItem.Name
									</li>
								}
							</ul>
						</Expander>
					</td>
					<td>
						<Expander Text="Show">
							<ul>
								@foreach (Process replant in crop._Replants)
								{
									<li>
										@replant.Input.Name
										=>
										@replant.Source.Name
										=>
										@replant.OutputItem.Name
									</li>
								}
							</ul>
						</Expander>
					</td>
					<td>
						@if (crop.HasPrice)
						{
							<span>
								@crop.Price
								(@crop.BestPrices[0].Source.Name)
							</span>
						}
						else
						{
							<span>???</span>
						}
					</td>
					<td>@((MarkupString)crop.Warnings)</td>
				</tr>
					}
				</table>
				<!--
					edit:
						selected seasons
						selected seed sources
						selected processes
						selected replant
				-->
			</Tab>
			<Tab Name="Fertilizer">
				<table class="data-table">
					<tr>
						<th></th>
						<th>Image</th>
						<th>Name</th>
						<th>Price and Source</th>
						<th>Quality</th>
						<th>Speed</th>
					</tr>
					@foreach (FertilizerDIO fertilizer in Data.Fertilizers)
					{
						<tr>
							<td>
								<label class="entry-checkbox-label">
									<input type="checkbox" class="entry-checkbox" @bind=fertilizer.Selected>
									<span class="entry-checkbox-background"></span>
								</label>
							</td>
							<td>Image</td>
							<td>@fertilizer.Name</td>
							<td>
								@if (fertilizer.HasPrice)
								{
									<span>
										@fertilizer.Price
										(@fertilizer.BestPrices[0].Source.Name)
									</span>
								}
								else
								{
									<span>???</span>
								}
							</td>
							<td>@fertilizer.Quality</td>
							<td>@fertilizer.Speed</td>
							<td>@((MarkupString)fertilizer.Warnings)</td>
						</tr>
					}
				</table>
				<!---
					edit:
						quality, speed?
						price? and selected sources
				-->
			</Tab>
		</TabGroup>
	</div>

	<div class="top-row">
		<button class="switch-calc-mode">
			Greenhouse Mode
		</button>
		<ToggleButton ToggledClass="toggled-button" UntoggledClass="toggle-button" @bind-Value=Data.MatchSources[0].Match>
			Joja Membership
		</ToggleButton>
		<ToggleButton ToggledClass="toggled-button" UntoggledClass="toggle-button" @bind-Value=Settings.SpecialCharm>
			Special Charm
		</ToggleButton>
		<ToggleButton ToggledClass="toggled-button" UntoggledClass="toggle-button" @bind-Value=Data.ShowOutOFSeasonCrops>
			Show out of season crops
		</ToggleButton>
	</div>
	<div class="skills">
		<span class="input-header">Skills</span>
		<TabGroup Class="skills" ActiveTab="active-tab" InactiveTab="inactive-tab">
			@foreach (Skill skill in Skills)
			{
				<Tab Name=@skill.Name>
					<label class="input-label">
						@skill.Name Level:
						<input type="number" class="number-input" @bind=skill.Level>
					</label>
					@foreach (Profession[] professions in skill.Professions)
					{
						@foreach (Profession profession in professions)
						{
							<ToggleButton ToggledClass="toggled-button" UntoggledClass="toggle-button" @bind-Value=profession.Selected>
								Image
								@profession.Name
							</ToggleButton>
						}
						<br />
					}
				</Tab>
			}
			<label class="entry-checkbox-label">
				Ignore Profession Conflicts
				<input type="checkbox" class="entry-checkbox" @bind=Skills.IgnoreConflicts>
				<span class="entry-checkbox-background"></span>
			</label>
		</TabGroup>
	</div>
	<div class="products">
		<span class="input-header">Sell</span>
		@foreach (Source processor in Data.SellSources)
		{
			<label class="input-checkbox-label">
				@processor.Name
				<input type="checkbox" class="input-checkbox" @bind=processor.Selected>
				<span class="input-checkbox-background"></span>
			</label>
		}
	</div>
	<div class="sources">
		<span class="input-header">Sources</span>
		@foreach (Source source in Data.BuySources)
		{
			<label class="input-checkbox-label">
				@source.Name
				<input type="checkbox" class="input-checkbox" @bind=source.Selected>
				<span class="input-checkbox-background"></span>
			</label>
		}
	</div>
	<div class="replant">
		<span class="input-header">Replant</span>
		@foreach (Source replant in Data.ReplantMethods)
		{
			<label class="input-checkbox-label">
				@replant.Name
				<input type="checkbox" class="input-checkbox" @bind=replant.Selected>
				<span class="input-checkbox-background"></span>
			</label>
		}
	</div>
	<div class="date">
		@if (!Date.Valid)
		{
			<span>The end date cannot be before or the same as the start date.</span>
		}
		<label class="input-header">
			Start Date:
			<select class="season-selector" @bind=Date.StartSeason>
				@foreach (Seasons season in Enum.GetValues(typeof(Seasons)))
				{
					<option value=@season>@season</option>
				}
			</select>
			<input type="number" class="number-input" @bind=Date.StartDay>
		</label>
		<label class="input-header">
			End Date:
			<select class="season-selector" @bind=Date.EndSeason>
				@foreach (Seasons season in Enum.GetValues(typeof(Seasons)))
				{
					<option value=@season>@season</option>
				}
			</select>
			<input type="number" class="number-input" @bind=Date.EndDay>
		</label>
		<label class="input-header">
			Year:
			<input type="number" class="number-input" @bind=Date.Year>
		</label>
	</div>
	<div class="bottom-row">
		<button class="switch-input-output" @onclick="@(() => Nav.NavigateTo("output"))">
			View Plans
		</button>
		<button class="calculate">
			Calculate Plans
		</button>
		<button class="help-button" @onclick="@(() => Nav.NavigateTo("help"))">
			Help
		</button>
	</div>
</div>
<div class="extra-settings">

	<!--
		special charm
		luck buff
		global seeds
		seed probability
		bool quality seed maker
			| seeds by quality
		giantcrop
		starting fert

		ignore conditions

		the dreaded settings:
			midseason fert change
			multi-regrow crops per season
			pair trelis crops with another crop
				trelis penalty/percent of land given to other crop

			//planned features
	/*
	 * forage crops
	 * honey
	 * cactus
	 * import/export?
	 * cooking recipies
	 * time penalty? / processing penalty?
	 * clear regrow
	 * fertChange
	 */
	-->
</div>
